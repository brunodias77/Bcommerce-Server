using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using AuthService.Domain.Services;
using BuildingBlocks.Mediator;
using BuildingBlocks.Results;
using BuildingBlocks.Data;
using BuildingBlocks.Validations;

namespace AuthService.Application.Commands.User.Register;

/// <summary>
/// Handler respons√°vel por processar o comando de registro de usu√°rio
/// Implementa toda a l√≥gica de cria√ß√£o de conta, valida√ß√µes e envio de confirma√ß√£o por email
/// </summary>
public class RegisterUserCommandHandler : IRequestHandler<RegisterUserCommand, ApiResponse<RegisterUserResponse>>
{
    private readonly UserManager<Domain.Entities.User> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly ILogger<RegisterUserCommandHandler> _logger;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IEmailService _emailService;

    /// <summary>
    /// Construtor que recebe todas as depend√™ncias necess√°rias via inje√ß√£o
    /// </summary>
    /// <param name="userManager">Gerenciador de usu√°rios do Identity</param>
    /// <param name="roleManager">Gerenciador de roles do Identity</param>
    /// <param name="logger">Logger para registro de opera√ß√µes</param>
    /// <param name="unitOfWork">Unidade de trabalho para transa√ß√µes</param>
    /// <param name="emailService">Servi√ßo de envio de emails</param>
    public RegisterUserCommandHandler(
        UserManager<Domain.Entities.User> userManager,
        RoleManager<IdentityRole> roleManager,
        ILogger<RegisterUserCommandHandler> logger,
        IUnitOfWork unitOfWork,
        IEmailService emailService)
    {
        _userManager = userManager ?? throw new ArgumentNullException(nameof(userManager));
        _roleManager = roleManager ?? throw new ArgumentNullException(nameof(roleManager));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        _emailService = emailService ?? throw new ArgumentNullException(nameof(emailService));
    }

    /// <summary>
    /// Processa o comando de registro de usu√°rio de forma ass√≠ncrona
    /// </summary>
    /// <param name="request">Dados do usu√°rio a ser registrado</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resposta da API com resultado da opera√ß√£o</returns>
    public async Task<ApiResponse<RegisterUserResponse>> HandleAsync(RegisterUserCommand request, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("üöÄ Iniciando processo de registro para o email: {Email}", request.Email);

        try
        {
            // Iniciar transa√ß√£o
            await _unitOfWork.BeginTransactionAsync(cancellationToken);

            // 1. Verificar se o email j√° existe
            var existingUser = await _userManager.FindByEmailAsync(request.Email);
            if (existingUser != null)
            {
                _logger.LogWarning("‚ö†Ô∏è Tentativa de registro com email j√° existente: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<RegisterUserResponse>.Fail(
                    new List<Error> { new("Este endere√ßo de email j√° possui uma conta associada") }
                );
            }

            // 2. Criar o novo usu√°rio
            var user = new Domain.Entities.User
            {
                UserName = request.Email,
                Email = request.Email,
                FullName = request.FullName,
                PhoneNumber = request.Phone,
                BirthDate = request.BirthDate,
                EmailConfirmed = false, // Inicialmente n√£o confirmado
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            _logger.LogInformation("üë§ Criando usu√°rio: {Email} - {FullName}", request.Email, request.FullName);
            var createResult = await _userManager.CreateAsync(user, request.Password);

            if (!createResult.Succeeded)
            {
                var errors = createResult.Errors.Select(e => new Error(e.Description)).ToList();
                _logger.LogError("‚ùå Falha ao criar usu√°rio {Email}: {Errors}", 
                    request.Email, string.Join(", ", errors.Select(e => e.Message)));
                
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<RegisterUserResponse>.Fail(errors);
            }

            _logger.LogInformation("‚úÖ Usu√°rio criado com sucesso: {UserId}", user.Id);

            // 3. Garantir que as roles padr√£o existam
            await EnsureDefaultRolesExistAsync();

            // 4. Atribuir role padr√£o "User"
            var roleResult = await _userManager.AddToRoleAsync(user, "User");
            if (!roleResult.Succeeded)
            {
                _logger.LogError("‚ùå Falha ao atribuir role 'User' ao usu√°rio {UserId}", user.Id);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<RegisterUserResponse>.Fail(
                    new List<Error> { new("Erro ao configurar permiss√µes do usu√°rio") }
                );
            }

            _logger.LogInformation("üîê Role 'User' atribu√≠da com sucesso ao usu√°rio {UserId}", user.Id);

            // 5. Gerar token de confirma√ß√£o de email
            var confirmationToken = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            _logger.LogInformation("üîë Token de confirma√ß√£o gerado para usu√°rio {UserId}", user.Id);

            // 6. Enviar email de confirma√ß√£o
            var emailSent = await _emailService.SendEmailConfirmationAsync(
                user.Email!, 
                confirmationToken, 
                Guid.Parse(user.Id), 
                cancellationToken
            );

            if (!emailSent)
            {
                _logger.LogError("üìß‚ùå Falha ao enviar email de confirma√ß√£o para {Email}", user.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<RegisterUserResponse>.Fail(
                    new List<Error> { new("Usu√°rio criado, mas falha ao enviar email de confirma√ß√£o. Tente novamente.") }
                );
            }

            _logger.LogInformation("üìß‚úÖ Email de confirma√ß√£o enviado com sucesso para {Email}", user.Email);

            // 7. Confirmar transa√ß√£o
            await _unitOfWork.CommitTransactionAsync(cancellationToken);

            // 8. Retornar resposta de sucesso
            var response = new RegisterUserResponse
            {
                UserId = user.Id,
                Email = user.Email!,
                Message = "Usu√°rio registrado com sucesso! Verifique seu email para confirmar a conta."
            };

            _logger.LogInformation("üéâ Registro conclu√≠do com sucesso para usu√°rio {UserId} - {Email}", 
                user.Id, user.Email);

            return ApiResponse<RegisterUserResponse>.Ok(response, "Usu√°rio registrado com sucesso");
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("‚èπÔ∏è Opera√ß√£o de registro cancelada para {Email}", request.Email);
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<RegisterUserResponse>.Fail(
                new List<Error> { new("Opera√ß√£o cancelada") }
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "üí• Erro inesperado durante registro do usu√°rio {Email}", request.Email);
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<RegisterUserResponse>.Fail(
                new List<Error> { new("Erro interno durante o registro. Tente novamente.") }
            );
        }
    }

    /// <summary>
    /// Garante que as roles padr√£o do sistema existam
    /// </summary>
    private async Task EnsureDefaultRolesExistAsync()
    {
        var defaultRoles = new[] { "User", "Admin", "Manager" };

        foreach (var roleName in defaultRoles)
        {
            if (!await _roleManager.RoleExistsAsync(roleName))
            {
                _logger.LogInformation("üîß Criando role padr√£o: {RoleName}", roleName);
                var role = new IdentityRole(roleName);
                var result = await _roleManager.CreateAsync(role);
                
                if (result.Succeeded)
                {
                    _logger.LogInformation("‚úÖ Role '{RoleName}' criada com sucesso", roleName);
                }
                else
                {
                    _logger.LogError("‚ùå Falha ao criar role '{RoleName}': {Errors}", 
                        roleName, string.Join(", ", result.Errors.Select(e => e.Description)));
                }
            }
        }
    }
}