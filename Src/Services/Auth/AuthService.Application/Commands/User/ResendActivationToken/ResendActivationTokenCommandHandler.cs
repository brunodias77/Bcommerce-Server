using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using AuthService.Domain.Services;
using BuildingBlocks.Mediator;
using BuildingBlocks.Results;
using BuildingBlocks.Data;
using BuildingBlocks.Validations;

namespace AuthService.Application.Commands.User.ResendActivationToken;

/// <summary>
/// Handler respons√°vel por processar o comando de reenvio de token de ativa√ß√£o
/// Implementa toda a l√≥gica de valida√ß√£o e reenvio de email de confirma√ß√£o
/// </summary>
public class ResendActivationTokenCommandHandler : IRequestHandler<ResendActivationTokenCommand, ApiResponse<ResendActivationTokenResponse>>
{
    private readonly UserManager<Domain.Entities.User> _userManager;
    private readonly ILogger<ResendActivationTokenCommandHandler> _logger;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IEmailService _emailService;

    /// <summary>
    /// Construtor que recebe todas as depend√™ncias necess√°rias via inje√ß√£o
    /// </summary>
    /// <param name="userManager">Gerenciador de usu√°rios do Identity</param>
    /// <param name="logger">Logger para registro de opera√ß√µes</param>
    /// <param name="unitOfWork">Unidade de trabalho para transa√ß√µes</param>
    /// <param name="emailService">Servi√ßo de envio de emails</param>
    public ResendActivationTokenCommandHandler(
        UserManager<Domain.Entities.User> userManager,
        ILogger<ResendActivationTokenCommandHandler> logger,
        IUnitOfWork unitOfWork,
        IEmailService emailService)
    {
        _userManager = userManager ?? throw new ArgumentNullException(nameof(userManager));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        _emailService = emailService ?? throw new ArgumentNullException(nameof(emailService));
    }

    /// <summary>
    /// Processa o comando de reenvio de token de ativa√ß√£o de forma ass√≠ncrona
    /// </summary>
    /// <param name="request">Dados do usu√°rio que deseja reenviar o token</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resposta da API com resultado da opera√ß√£o</returns>
    public async Task<ApiResponse<ResendActivationTokenResponse>> HandleAsync(ResendActivationTokenCommand request, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("üîÑ Iniciando processo de reenvio de token de ativa√ß√£o para o email: {Email}", request.Email);

        try
        {
            // Iniciar transa√ß√£o
            await _unitOfWork.BeginTransactionAsync(cancellationToken);

            // 1. Verificar se o usu√°rio existe
            var user = await _userManager.FindByEmailAsync(request.Email);
            if (user == null)
            {
                _logger.LogWarning("‚ö†Ô∏è Tentativa de reenvio de token para email n√£o cadastrado: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<ResendActivationTokenResponse>.Fail(
                    new List<Error> { new("Usu√°rio n√£o encontrado com este endere√ßo de email") }
                );
            }

            // 2. Verificar se o usu√°rio j√° est√° confirmado
            if (user.EmailConfirmed)
            {
                _logger.LogWarning("‚ö†Ô∏è Tentativa de reenvio de token para usu√°rio j√° confirmado: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<ResendActivationTokenResponse>.Fail(
                    new List<Error> { new("Esta conta j√° foi ativada. Voc√™ pode fazer login normalmente.") }
                );
            }

            _logger.LogInformation("‚úÖ Usu√°rio encontrado e n√£o confirmado: {UserId} - {Email}", user.Id, user.Email);

            // 3. Gerar novo token de confirma√ß√£o de email
            var confirmationToken = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            _logger.LogInformation("üîë Novo token de confirma√ß√£o gerado para usu√°rio {UserId}", user.Id);

            // 4. Enviar email de confirma√ß√£o
            var emailSent = await _emailService.SendEmailConfirmationAsync(
                user.Email!, 
                confirmationToken, 
                Guid.Parse(user.Id), 
                cancellationToken
            );

            if (!emailSent)
            {
                _logger.LogError("üìß‚ùå Falha ao enviar email de confirma√ß√£o para {Email}", user.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<ResendActivationTokenResponse>.Fail(
                    new List<Error> { new("Falha ao enviar email de confirma√ß√£o. Tente novamente em alguns minutos.") }
                );
            }

            _logger.LogInformation("üìß‚úÖ Email de confirma√ß√£o reenviado com sucesso para {Email}", user.Email);

            // 5. Confirmar transa√ß√£o
            await _unitOfWork.CommitTransactionAsync(cancellationToken);

            // 6. Retornar resposta de sucesso
            var response = new ResendActivationTokenResponse
            {
                Email = user.Email!,
                Message = "Token de ativa√ß√£o reenviado com sucesso! Verifique seu email para confirmar a conta.",
                SentAt = DateTime.UtcNow
            };

            _logger.LogInformation("üéâ Reenvio de token conclu√≠do com sucesso para usu√°rio {UserId} - {Email}", 
                user.Id, user.Email);

            return ApiResponse<ResendActivationTokenResponse>.Ok(response, "Token de ativa√ß√£o reenviado com sucesso");
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("‚èπÔ∏è Opera√ß√£o de reenvio de token cancelada para {Email}", request.Email);
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<ResendActivationTokenResponse>.Fail(
                new List<Error> { new("Opera√ß√£o cancelada") }
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "üí• Erro inesperado durante reenvio de token para {Email}", request.Email);
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<ResendActivationTokenResponse>.Fail(
                new List<Error> { new("Erro interno durante o reenvio. Tente novamente.") }
            );
        }
    }
}