using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using AuthService.Domain.Entities;
using AuthService.Domain.Repositories;
using AuthService.Domain.Services;
using BuildingBlocks.Mediator;
using BuildingBlocks.Results;
using BuildingBlocks.Data;
using BuildingBlocks.Validations;

namespace AuthService.Application.Commands.User.Logout;

/// <summary>
/// Handler respons√°vel por processar o comando de logout de usu√°rio
/// Implementa toda a l√≥gica de revoga√ß√£o de refresh tokens
/// </summary>
/// <remarks>
/// Este handler utiliza o servi√ßo LoggedUser para obter automaticamente o usu√°rio autenticado
/// atrav√©s do token JWT, n√£o necessitando receber o UserId como par√¢metro
/// </remarks>
public class LogoutUserCommandHandler : IRequestHandler<LogoutUserCommand, ApiResponse<LogoutUserResponse>>
{
    private readonly ILoggedUser _loggedUser;
    private readonly IRefreshTokenRepository _refreshTokenRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<LogoutUserCommandHandler> _logger;

    /// <summary>
    /// Construtor que recebe todas as depend√™ncias necess√°rias via inje√ß√£o
    /// </summary>
    /// <param name="loggedUser">Servi√ßo para obter informa√ß√µes do usu√°rio autenticado</param>
    /// <param name="refreshTokenRepository">Reposit√≥rio para opera√ß√µes com refresh tokens</param>
    /// <param name="unitOfWork">Unidade de trabalho para transa√ß√µes</param>
    /// <param name="logger">Logger para registro de opera√ß√µes</param>
    /// <exception cref="ArgumentNullException">Lan√ßado quando algum par√¢metro √© nulo</exception>
    public LogoutUserCommandHandler(
        ILoggedUser loggedUser,
        IRefreshTokenRepository refreshTokenRepository,
        IUnitOfWork unitOfWork,
        ILogger<LogoutUserCommandHandler> logger)
    {
        _loggedUser = loggedUser ?? throw new ArgumentNullException(nameof(loggedUser));
        _refreshTokenRepository = refreshTokenRepository ?? throw new ArgumentNullException(nameof(refreshTokenRepository));
        _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Executa o comando de logout de forma ass√≠ncrona
    /// </summary>
    /// <param name="request">Comando de logout</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resposta da opera√ß√£o de logout</returns>
    /// <exception cref="UnauthorizedAccessException">Lan√ßado quando o usu√°rio n√£o est√° autenticado</exception>
    /// <exception cref="InvalidOperationException">Lan√ßado quando o usu√°rio n√£o √© encontrado</exception>
    public async Task<ApiResponse<LogoutUserResponse>> HandleAsync(LogoutUserCommand request, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("üöÄ Iniciando processo de logout para usu√°rio autenticado");

        try
        {
            // 1. Obter usu√°rio autenticado via token JWT
            var user = await _loggedUser.User();
            _logger.LogInformation("‚úÖ Usu√°rio {UserId} - {Email} identificado via JWT", user.Id, user.Email);

            // 2. Iniciar transa√ß√£o
            await _unitOfWork.BeginTransactionAsync(cancellationToken);
            _logger.LogInformation("üì¶ Transa√ß√£o iniciada para logout do usu√°rio {UserId}", user.Id);

            int revokedTokensCount = 0;

            // 3. Revogar tokens baseado na estrat√©gia
            if (!string.IsNullOrWhiteSpace(request.RefreshToken))
            {
                // Revogar apenas o token espec√≠fico
                revokedTokensCount = await RevokeSpecificTokenAsync(user.Id, request.RefreshToken, cancellationToken);
                _logger.LogInformation("üîí Token espec√≠fico revogado para usu√°rio {UserId}. Tokens revogados: {Count}", 
                    user.Id, revokedTokensCount);
            }
            else
            {
                // Revogar todos os tokens ativos do usu√°rio
                revokedTokensCount = await RevokeAllUserTokensAsync(user.Id, cancellationToken);
                _logger.LogInformation("üîí Todos os tokens revogados para usu√°rio {UserId}. Tokens revogados: {Count}", 
                    user.Id, revokedTokensCount);
            }

            // 4. Salvar altera√ß√µes
            try
            {
                await _unitOfWork.SaveChangesAsync(cancellationToken);
                await _unitOfWork.CommitTransactionAsync(cancellationToken);
                
                _logger.LogInformation("üíæ Altera√ß√µes salvas com sucesso para logout do usu√°rio {UserId}", user.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao salvar altera√ß√µes para logout do usu√°rio {UserId}", user.Id);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LogoutUserResponse>.Fail(
                    new List<Error> { new("Erro interno durante logout. Tente novamente.") }
                );
            }

            // 5. Retornar resposta de sucesso
            var response = new LogoutUserResponse
            {
                Success = true,
                Message = revokedTokensCount > 0 
                    ? $"Logout realizado com sucesso. {revokedTokensCount} token(s) revogado(s)."
                    : "Logout realizado com sucesso. Nenhum token ativo encontrado.",
                RevokedTokensCount = revokedTokensCount
            };

            _logger.LogInformation("üéâ Logout realizado com sucesso para usu√°rio {UserId} - {Email}. Tokens revogados: {Count}", 
                user.Id, user.Email, revokedTokensCount);

            return ApiResponse<LogoutUserResponse>.Ok(response, "Logout realizado com sucesso");
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("‚èπÔ∏è Opera√ß√£o de logout cancelada");
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<LogoutUserResponse>.Fail(
                new List<Error> { new("Opera√ß√£o cancelada") }
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "üí• Erro inesperado durante logout");
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<LogoutUserResponse>.Fail(
                new List<Error> { new("Erro interno durante logout. Tente novamente.") }
            );
        }
    }

    /// <summary>
    /// Valida os dados de entrada do comando
    /// </summary>
    /// <param name="request">Comando a ser validado</param>
    /// <returns>Resultado da valida√ß√£o</returns>
    private ValidationHandler ValidateRequest(LogoutUserCommand request)
    {
        var validation = new ValidationHandler();

        // N√£o h√° valida√ß√µes espec√≠ficas necess√°rias, pois o usu√°rio √© obtido via token JWT
        // O RefreshToken √© opcional

        return validation;
    }

    /// <summary>
    /// Revoga um refresh token espec√≠fico
    /// </summary>
    /// <param name="userId">ID do usu√°rio</param>
    /// <param name="refreshToken">Token espec√≠fico para revogar</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Quantidade de tokens revogados</returns>
    private async Task<int> RevokeSpecificTokenAsync(string userId, string refreshToken, CancellationToken cancellationToken)
    {
        _logger.LogInformation("üîç Buscando token espec√≠fico para usu√°rio {UserId}", userId);

        var tokens = await _refreshTokenRepository.FindAsync(
            rt => rt.UserId == userId && rt.Token == refreshToken && rt.RevokedAt == null,
            cancellationToken
        );

        var tokenToRevoke = tokens.FirstOrDefault();
        if (tokenToRevoke == null)
        {
            _logger.LogWarning("‚ö†Ô∏è Token espec√≠fico n√£o encontrado ou j√° revogado para usu√°rio {UserId}", userId);
            return 0;
        }

        // Verificar se o token ainda est√° ativo
        if (!tokenToRevoke.IsActive)
        {
            _logger.LogWarning("‚ö†Ô∏è Token espec√≠fico j√° expirado para usu√°rio {UserId}", userId);
            return 0;
        }

        // Revogar o token
        tokenToRevoke.RevokedAt = DateTime.UtcNow;
        _refreshTokenRepository.Update(tokenToRevoke);

        _logger.LogInformation("‚úÖ Token espec√≠fico revogado para usu√°rio {UserId}", userId);
        return 1;
    }

    /// <summary>
    /// Revoga todos os refresh tokens ativos de um usu√°rio
    /// </summary>
    /// <param name="userId">ID do usu√°rio</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Quantidade de tokens revogados</returns>
    private async Task<int> RevokeAllUserTokensAsync(string userId, CancellationToken cancellationToken)
    {
        _logger.LogInformation("üîç Buscando todos os tokens ativos para usu√°rio {UserId}", userId);

        var activeTokens = await _refreshTokenRepository.FindAsync(
            rt => rt.UserId == userId && rt.RevokedAt == null && rt.ExpiresAt > DateTime.UtcNow,
            cancellationToken
        );

        if (!activeTokens.Any())
        {
            _logger.LogInformation("‚ÑπÔ∏è Nenhum token ativo encontrado para usu√°rio {UserId}", userId);
            return 0;
        }

        var revokedCount = 0;
        var revokedAt = DateTime.UtcNow;

        foreach (var token in activeTokens)
        {
            token.RevokedAt = revokedAt;
            _refreshTokenRepository.Update(token);
            revokedCount++;
        }

        _logger.LogInformation("‚úÖ {Count} tokens revogados para usu√°rio {UserId}", revokedCount, userId);
        return revokedCount;
    }
}