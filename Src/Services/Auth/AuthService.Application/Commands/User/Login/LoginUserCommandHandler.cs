using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using AuthService.Domain.Services.Token;
using AuthService.Domain.Entities;
using AuthService.Domain.Repositories;
using BuildingBlocks.Mediator;
using BuildingBlocks.Results;
using BuildingBlocks.Data;
using BuildingBlocks.Validations;

namespace AuthService.Application.Commands.User.Login;

/// <summary>
/// Handler respons√°vel por processar o comando de login de usu√°rio
/// Implementa toda a l√≥gica de autentica√ß√£o, valida√ß√£o e gera√ß√£o de tokens JWT
/// </summary>
public class LoginUserCommandHandler : IRequestHandler<LoginUserCommand, ApiResponse<LoginUserResponse>>
{
    private readonly UserManager<Domain.Entities.User> _userManager;
    private readonly SignInManager<Domain.Entities.User> _signInManager;
    private readonly ITokenJwtService _tokenJwtService;
    private readonly IRefreshTokenRepository _refreshTokenRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<LoginUserCommandHandler> _logger;

    /// <summary>
    /// Construtor que recebe todas as depend√™ncias necess√°rias via inje√ß√£o
    /// </summary>
    /// <param name="userManager">Gerenciador de usu√°rios do Identity</param>
    /// <param name="signInManager">Gerenciador de login do Identity</param>
    /// <param name="tokenJwtService">Servi√ßo de gera√ß√£o de tokens JWT</param>
    /// <param name="refreshTokenRepository">Reposit√≥rio para opera√ß√µes com refresh tokens</param>
    /// <param name="unitOfWork">Unidade de trabalho para transa√ß√µes</param>
    /// <param name="logger">Logger para registro de opera√ß√µes</param>
    public LoginUserCommandHandler(
        UserManager<Domain.Entities.User> userManager,
        SignInManager<Domain.Entities.User> signInManager,
        ITokenJwtService tokenJwtService,
        IRefreshTokenRepository refreshTokenRepository,
        IUnitOfWork unitOfWork,
        ILogger<LoginUserCommandHandler> logger)
    {
        _userManager = userManager ?? throw new ArgumentNullException(nameof(userManager));
        _signInManager = signInManager ?? throw new ArgumentNullException(nameof(signInManager));
        _tokenJwtService = tokenJwtService ?? throw new ArgumentNullException(nameof(tokenJwtService));
        _refreshTokenRepository = refreshTokenRepository ?? throw new ArgumentNullException(nameof(refreshTokenRepository));
        _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Processa o comando de login de usu√°rio de forma ass√≠ncrona
    /// </summary>
    /// <param name="request">Dados de login do usu√°rio</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resposta da API com resultado da opera√ß√£o</returns>
    public async Task<ApiResponse<LoginUserResponse>> HandleAsync(LoginUserCommand request, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("üîê Iniciando processo de login para o email: {Email}", request.Email);

        try
        {
            // Iniciar transa√ß√£o
            await _unitOfWork.BeginTransactionAsync(cancellationToken);

            // 1. Buscar usu√°rio pelo email
            var user = await _userManager.FindByEmailAsync(request.Email);
            if (user == null)
            {
                _logger.LogWarning("‚ö†Ô∏è Tentativa de login com email n√£o encontrado: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LoginUserResponse>.Fail(
                    new List<Error> { new("Email ou senha inv√°lidos") }
                );
            }

            // 2. Verificar se a conta est√° confirmada
            if (!user.EmailConfirmed)
            {
                _logger.LogWarning("‚ö†Ô∏è Tentativa de login com conta n√£o confirmada: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LoginUserResponse>.Fail(
                    new List<Error> { new("Conta n√£o confirmada. Verifique seu email para confirmar a conta.") }
                );
            }

            // 3. Verificar se a conta est√° bloqueada
            if (await _userManager.IsLockedOutAsync(user))
            {
                _logger.LogWarning("üîí Tentativa de login com conta bloqueada: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LoginUserResponse>.Fail(
                    new List<Error> { new("Conta temporariamente bloqueada devido a m√∫ltiplas tentativas de login inv√°lidas") }
                );
            }

            // 4. Verificar credenciais
            var signInResult = await _signInManager.CheckPasswordSignInAsync(user, request.Password, lockoutOnFailure: true);
            
            if (!signInResult.Succeeded)
            {
                if (signInResult.IsLockedOut)
                {
                    _logger.LogWarning("üîí Conta bloqueada ap√≥s tentativa de login inv√°lida: {Email}", request.Email);
                    await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                    
                    return ApiResponse<LoginUserResponse>.Fail(
                        new List<Error> { new("Conta bloqueada devido a m√∫ltiplas tentativas de login inv√°lidas") }
                    );
                }

                _logger.LogWarning("‚ùå Credenciais inv√°lidas para: {Email}", request.Email);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LoginUserResponse>.Fail(
                    new List<Error> { new("Email ou senha inv√°lidos") }
                );
            }

            _logger.LogInformation("‚úÖ Credenciais v√°lidas para usu√°rio: {UserId}", user.Id);

            // 5. Gerar tokens JWT
            _logger.LogInformation("üîë Gerando tokens JWT para usu√°rio: {UserId}", user.Id);
            
            // Obter roles do usu√°rio
            var userRoles = await _userManager.GetRolesAsync(user);
            
            var accessToken = await _tokenJwtService.GenerateAccessTokenAsync(user, userRoles);
            var refreshToken = await _tokenJwtService.GenerateRefreshTokenAsync();

            // 6. Atualizar dados do usu√°rio
            try
            {
                // Atualizar dados do usu√°rio
                user.LastLoginAt = DateTime.UtcNow;
                user.UpdatedAt = DateTime.UtcNow;

                var updateResult = await _userManager.UpdateAsync(user);
                if (!updateResult.Succeeded)
                {
                    var errors = string.Join(", ", updateResult.Errors.Select(e => e.Description));
                    _logger.LogError("‚ùå Falha ao atualizar dados do usu√°rio {UserId}: {Errors}", user.Id, errors);
                    
                    await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                    
                    return ApiResponse<LoginUserResponse>.Fail(
                        new List<Error> { new("Erro interno durante o login. Tente novamente.") }
                    );
                }

                _logger.LogInformation("‚úÖ Dados do usu√°rio {UserId} atualizados com sucesso", user.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao atualizar dados do usu√°rio {UserId}", user.Id);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LoginUserResponse>.Fail(
                    new List<Error> { new("Erro interno durante o login. Tente novamente.") }
                );
            }

            // 7. Agora salvar o refresh token usando o repository
            var refreshTokenEntity = new Domain.Entities.RefreshToken
            {
                UserId = user.Id,
                Token = refreshToken,
                ExpiresAt = DateTime.UtcNow.AddDays(30), // 30 dias de validade
                CreatedAt = DateTime.UtcNow
            };

            try
            {
                // Adicionar o refresh token usando o repository
                await _refreshTokenRepository.AddAsync(refreshTokenEntity, cancellationToken);
                await _unitOfWork.SaveChangesAsync(cancellationToken);
                _logger.LogInformation("‚úÖ Refresh token salvo com sucesso via repository para usu√°rio {UserId}", user.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao salvar refresh token via repository para usu√°rio {UserId}", user.Id);
                await _unitOfWork.RollbackTransactionAsync(cancellationToken);
                
                return ApiResponse<LoginUserResponse>.Fail(
                    new List<Error> { new("Erro interno durante o login. Tente novamente.") }
                );
            }

            // 8. Confirmar transa√ß√£o
            await _unitOfWork.CommitTransactionAsync(cancellationToken);

            // 9. Retornar resposta de sucesso
            var response = new LoginUserResponse
            {
                AccessToken = accessToken,
                RefreshToken = refreshToken,
                ExpiresIn = 3600, // 1 hora em segundos
                TokenType = "Bearer",
                UserId = user.Id,
                Email = user.Email!,
                FullName = user.FullName
            };

            _logger.LogInformation("üéâ Login realizado com sucesso para usu√°rio {UserId} - {Email}", 
                user.Id, user.Email);

            return ApiResponse<LoginUserResponse>.Ok(response, "Login realizado com sucesso");
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("‚èπÔ∏è Opera√ß√£o de login cancelada para {Email}", request.Email);
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<LoginUserResponse>.Fail(
                new List<Error> { new("Opera√ß√£o cancelada") }
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "üí• Erro inesperado durante login do usu√°rio {Email}", request.Email);
            await _unitOfWork.RollbackTransactionAsync(CancellationToken.None);
            
            return ApiResponse<LoginUserResponse>.Fail(
                new List<Error> { new("Erro interno durante o login. Tente novamente.") }
            );
        }
    }
}