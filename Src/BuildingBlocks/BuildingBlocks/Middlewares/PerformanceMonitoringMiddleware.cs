using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BuildingBlocks.Middlewares
{
    /// <summary>
    /// Middleware para monitoramento de performance de requisi√ß√µes HTTP.
    /// 
    /// Este middleware mede o tempo de execu√ß√£o de cada requisi√ß√£o e identifica
    /// requisi√ß√µes que excedem um limite de tempo configurado, ajudando a detectar
    /// gargalos de performance na aplica√ß√£o.
    /// 
    /// Funcionalidades principais:
    /// - Mede o tempo total de processamento de cada requisi√ß√£o
    /// - Identifica e registra requisi√ß√µes lentas (acima do threshold configurado)
    /// - Fornece m√©tricas detalhadas incluindo path, m√©todo HTTP, dura√ß√£o e status code
    /// - Utiliza Stopwatch para medi√ß√£o precisa de tempo
    /// - Garante que o monitoramento ocorra mesmo em caso de exce√ß√µes
    /// 
    /// Benef√≠cios:
    /// - Detec√ß√£o proativa de problemas de performance
    /// - Identifica√ß√£o de endpoints que precisam de otimiza√ß√£o
    /// - Monitoramento cont√≠nuo da sa√∫de da aplica√ß√£o
    /// - Dados para an√°lise de SLA e m√©tricas de performance
    /// 
    /// Uso: Registre este middleware no in√≠cio do pipeline para capturar
    /// o tempo total de processamento de todas as requisi√ß√µes.
    /// </summary>
    public class PerformanceMonitoringMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<PerformanceMonitoringMiddleware> _logger;
        
        /// <summary>
        /// Limite de tempo em milissegundos para considerar uma requisi√ß√£o como lenta.
        /// Requisi√ß√µes que excedem este valor ser√£o registradas como advert√™ncias.
        /// 
        /// Valor padr√£o: 1000ms (1 segundo)
        /// 
        /// Nota: Em produ√ß√£o, considere ajustar este valor baseado nos SLAs
        /// e caracter√≠sticas espec√≠ficas da sua aplica√ß√£o.
        /// </summary>
        private const int SlowRequestThresholdMs = 1000; // 1 segundo

        /// <summary>
        /// Construtor do middleware de monitoramento de performance.
        /// </summary>
        /// <param name="next">Pr√≥ximo middleware no pipeline</param>
        /// <param name="logger">Logger para registrar m√©tricas de performance</param>
        public PerformanceMonitoringMiddleware(
            RequestDelegate next,
            ILogger<PerformanceMonitoringMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        /// <summary>
        /// M√©todo principal de execu√ß√£o do middleware.
        /// 
        /// Este m√©todo:
        /// 1. Inicia um cron√¥metro (Stopwatch) antes do processamento
        /// 2. Executa o pr√≥ximo middleware no pipeline
        /// 3. Para o cron√¥metro ap√≥s o processamento (mesmo em caso de exce√ß√£o)
        /// 4. Verifica se o tempo excede o threshold configurado
        /// 5. Registra um log de advert√™ncia para requisi√ß√µes lentas
        /// 
        /// O uso do bloco try/finally garante que o monitoramento seja realizado
        /// independentemente de exce√ß√µes que possam ocorrer durante o processamento.
        /// </summary>
        /// <param name="context">Contexto HTTP da requisi√ß√£o atual</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona</returns>
        public async Task InvokeAsync(HttpContext context)
        {
            // Inicia o cron√¥metro para medir o tempo de processamento
            // Stopwatch fornece medi√ß√£o de alta precis√£o
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();

            try
            {
                // Executa o pr√≥ximo middleware no pipeline
                // Todo o processamento da requisi√ß√£o acontece aqui
                await _next(context);
            }
            finally
            {
                // Para o cron√¥metro independentemente de sucesso ou falha
                // O bloco finally garante que o monitoramento sempre ocorra
                stopwatch.Stop();

                // Verifica se a requisi√ß√£o excedeu o limite de tempo configurado
                if (stopwatch.ElapsedMilliseconds > SlowRequestThresholdMs)
                {
                    // Registra um log de advert√™ncia com informa√ß√µes detalhadas
                    // O emoji üêå facilita a identifica√ß√£o visual de requisi√ß√µes lentas
                    _logger.LogWarning(
                        "üêå SLOW REQUEST | Path: {Path} | Method: {Method} | " +
                        "Duration: {Duration}ms | StatusCode: {StatusCode}",
                        context.Request.Path,           // Endpoint acessado
                        context.Request.Method,         // M√©todo HTTP (GET, POST, etc.)
                        stopwatch.ElapsedMilliseconds,  // Tempo total em milissegundos
                        context.Response.StatusCode);   // C√≥digo de status da resposta
                }
            }
        }
    }
}
