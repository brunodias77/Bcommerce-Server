using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BuildingBlocks.Middlewares
{
    /// <summary>
    /// Middleware para logging detalhado de requisi√ß√µes e respostas HTTP.
    /// 
    /// Este middleware captura e registra informa√ß√µes completas sobre todas as requisi√ß√µes
    /// e respostas que passam pela aplica√ß√£o, fornecendo rastreabilidade e debugging avan√ßado.
    /// 
    /// Funcionalidades principais:
    /// - Gera um ID de correla√ß√£o √∫nico para cada requisi√ß√£o
    /// - Registra detalhes completos da requisi√ß√£o (m√©todo, path, headers, body)
    /// - Registra detalhes completos da resposta (status, headers, body, tempo de processamento)
    /// - Mede o tempo total de processamento de cada requisi√ß√£o
    /// - Adiciona header X-Correlation-Id para rastreamento distribu√≠do
    /// - Utiliza diferentes n√≠veis de log baseados no status code da resposta
    /// - Suporta buffering para capturar bodies de requisi√ß√£o e resposta
    /// 
    /// Benef√≠cios:
    /// - Rastreabilidade completa de requisi√ß√µes em sistemas distribu√≠dos
    /// - Debugging facilitado atrav√©s de logs estruturados
    /// - Monitoramento de performance por requisi√ß√£o
    /// - Auditoria completa de tr√°fego HTTP
    /// - Correla√ß√£o entre logs de diferentes servi√ßos
    /// 
    /// Considera√ß√µes de performance:
    /// - Pode impactar performance em aplica√ß√µes de alto volume
    /// - Bodies s√£o carregados em mem√≥ria para logging
    /// - Considere filtrar endpoints sens√≠veis ou de alta frequ√™ncia
    /// 
    /// Uso: Registre este middleware no in√≠cio do pipeline para capturar
    /// todas as requisi√ß√µes, ou ap√≥s middlewares de autentica√ß√£o se necess√°rio.
    /// </summary>
    public class RequestResponseLoggingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<RequestResponseLoggingMiddleware> _logger;

        /// <summary>
        /// Construtor do middleware de logging de requisi√ß√µes e respostas.
        /// </summary>
        /// <param name="next">Pr√≥ximo middleware no pipeline</param>
        /// <param name="logger">Logger para registrar informa√ß√µes de requisi√ß√µes e respostas</param>
        public RequestResponseLoggingMiddleware(
            RequestDelegate next,
            ILogger<RequestResponseLoggingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        /// <summary>
        /// M√©todo principal de execu√ß√£o do middleware.
        /// 
        /// Este m√©todo:
        /// 1. Gera um ID de correla√ß√£o √∫nico para a requisi√ß√£o
        /// 2. Adiciona o ID de correla√ß√£o aos headers da resposta
        /// 3. Registra informa√ß√µes detalhadas da requisi√ß√£o
        /// 4. Configura captura do body da resposta
        /// 5. Mede o tempo de processamento
        /// 6. Executa o pr√≥ximo middleware
        /// 7. Registra informa√ß√µes detalhadas da resposta
        /// 8. Restaura o stream original da resposta
        /// 
        /// O uso de try/finally garante que o logging da resposta sempre ocorra,
        /// mesmo em caso de exce√ß√µes durante o processamento.
        /// </summary>
        /// <param name="context">Contexto HTTP da requisi√ß√£o atual</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona</returns>
        public async Task InvokeAsync(HttpContext context)
        {
            // Gera um ID √∫nico para correlacionar logs desta requisi√ß√£o
            // √ötil para rastrear requisi√ß√µes em sistemas distribu√≠dos
            var correlationId = Guid.NewGuid().ToString();
            
            // Adiciona o ID de correla√ß√£o aos headers da resposta
            // Permite que clientes e outros servi√ßos correlacionem logs
            context.Response.Headers.Append("X-Correlation-Id", correlationId);

            // Registra informa√ß√µes detalhadas da requisi√ß√£o recebida
            await LogRequestAsync(context, correlationId);

            // Configura captura do body da resposta
            // Necess√°rio porque o Response.Body √© um stream write-only por padr√£o
            var originalBodyStream = context.Response.Body;
            using var responseBody = new MemoryStream();
            context.Response.Body = responseBody;

            // Inicia cron√¥metro para medir tempo de processamento
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();

            try
            {
                // Executa o pr√≥ximo middleware no pipeline
                await _next(context);
            }
            finally
            {
                // Para o cron√¥metro independentemente de sucesso ou falha
                stopwatch.Stop();

                // Registra informa√ß√µes detalhadas da resposta gerada
                await LogResponseAsync(context, correlationId, stopwatch.ElapsedMilliseconds);

                // Restaura o conte√∫do da resposta para o stream original
                // Necess√°rio para que a resposta seja enviada ao cliente
                responseBody.Seek(0, SeekOrigin.Begin);
                await responseBody.CopyToAsync(originalBodyStream);
            }
        }

        /// <summary>
        /// Registra informa√ß√µes detalhadas da requisi√ß√£o HTTP recebida.
        /// 
        /// Este m√©todo:
        /// 1. Habilita buffering para permitir m√∫ltiplas leituras do body
        /// 2. L√™ o conte√∫do do body da requisi√ß√£o (se presente)
        /// 3. Registra informa√ß√µes estruturadas da requisi√ß√£o
        /// 4. Reposiciona o stream do body para o in√≠cio
        /// 
        /// O buffering √© necess√°rio porque o Request.Body √© um stream forward-only,
        /// e precisamos l√™-lo sem impedir que outros middlewares o utilizem.
        /// </summary>
        /// <param name="context">Contexto HTTP da requisi√ß√£o</param>
        /// <param name="correlationId">ID de correla√ß√£o √∫nico da requisi√ß√£o</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona</returns>
        private async Task LogRequestAsync(HttpContext context, string correlationId)
        {
            // Habilita buffering para permitir m√∫ltiplas leituras do Request.Body
            // Sem isso, o stream s√≥ pode ser lido uma vez
            context.Request.EnableBuffering();

            var request = context.Request;
            var body = string.Empty;

            // L√™ o body da requisi√ß√£o se houver conte√∫do
            if (request.ContentLength > 0)
            {
                // Reposiciona para o in√≠cio do stream
                request.Body.Seek(0, SeekOrigin.Begin);
                
                // L√™ o conte√∫do completo do body
                // leaveOpen: true mant√©m o stream aberto para outros middlewares
                using var reader = new StreamReader(request.Body, leaveOpen: true);
                body = await reader.ReadToEndAsync();
                
                // Reposiciona novamente para o in√≠cio para pr√≥ximos middlewares
                request.Body.Seek(0, SeekOrigin.Begin);
            }

            // Registra informa√ß√µes estruturadas da requisi√ß√£o
            // O emoji üì• facilita identifica√ß√£o visual de logs de entrada
            _logger.LogInformation(
                "üì• HTTP Request | Correlation: {CorrelationId} | " +
                "Method: {Method} | Path: {Path} | QueryString: {QueryString} | " +
                "ContentType: {ContentType} | ContentLength: {ContentLength}",
                correlationId,
                request.Method,          // GET, POST, PUT, DELETE, etc.
                request.Path,            // Caminho da URL (/api/users)
                request.QueryString,     // Par√¢metros de query (?id=123&name=test)
                request.ContentType,     // Tipo de conte√∫do (application/json)
                request.ContentLength);  // Tamanho do body em bytes

            // Registra o body apenas em n√≠vel Debug para evitar logs excessivos
            // Em produ√ß√£o, considere filtrar informa√ß√µes sens√≠veis
            if (!string.IsNullOrEmpty(body))
            {
                _logger.LogDebug("üìÑ Request Body: {Body}", body);
            }
        }

        /// <summary>
        /// Registra informa√ß√µes detalhadas da resposta HTTP gerada.
        /// 
        /// Este m√©todo:
        /// 1. L√™ o conte√∫do do body da resposta
        /// 2. Determina o n√≠vel de log baseado no status code
        /// 3. Registra informa√ß√µes estruturadas da resposta
        /// 4. Reposiciona o stream da resposta para o in√≠cio
        /// 
        /// O n√≠vel de log √© determinado pelo status code:
        /// - 5xx: Error (problemas do servidor)
        /// - 4xx: Warning (problemas do cliente)
        /// - Outros: Information (sucesso)
        /// </summary>
        /// <param name="context">Contexto HTTP da requisi√ß√£o</param>
        /// <param name="correlationId">ID de correla√ß√£o √∫nico da requisi√ß√£o</param>
        /// <param name="elapsedMs">Tempo decorrido em milissegundos</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona</returns>
        private async Task LogResponseAsync(
            HttpContext context,
            string correlationId,
            long elapsedMs)
        {
            var response = context.Response;
            
            // L√™ o conte√∫do do body da resposta
            response.Body.Seek(0, SeekOrigin.Begin);
            var body = await new StreamReader(response.Body).ReadToEndAsync();
            response.Body.Seek(0, SeekOrigin.Begin);

            // Determina o n√≠vel de log baseado no status code da resposta
            // Isso permite filtrar logs por severidade
            var logLevel = response.StatusCode >= 500
                ? LogLevel.Error      // 5xx: Erros do servidor
                : response.StatusCode >= 400
                    ? LogLevel.Warning    // 4xx: Erros do cliente
                    : LogLevel.Information; // 2xx, 3xx: Sucesso

            // Registra informa√ß√µes estruturadas da resposta
            // O emoji üì§ facilita identifica√ß√£o visual de logs de sa√≠da
            _logger.Log(logLevel,
                "üì§ HTTP Response | Correlation: {CorrelationId} | " +
                "StatusCode: {StatusCode} | ContentType: {ContentType} | " +
                "Duration: {Duration}ms",
                correlationId,
                response.StatusCode,     // C√≥digo de status HTTP (200, 404, 500, etc.)
                response.ContentType,    // Tipo de conte√∫do da resposta
                elapsedMs);             // Tempo total de processamento

            // Registra o body da resposta apenas em n√≠vel Debug
            // Em produ√ß√£o, considere filtrar informa√ß√µes sens√≠veis
            if (!string.IsNullOrEmpty(body))
            {
                _logger.LogDebug("üìÑ Response Body: {Body}", body);
            }
        }
    }
}
